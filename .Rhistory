dash_summary <- get_summary_info(dash_price)
iota_summary <- get_summary_info(iota_price)
# code below doesn't get the right values but seems correct
GPU_summary <- list()
GPU_summary$max_release_price <- GPUs %>%
filter(Release_Price == max(Release_Price, na.rm = T)) %>%
select(Release_Price)
GPU_summary$max_price_release_date <- GPUs %>%
filter(Release_Price == max(Release_Price, na.rm = T)) %>%
select(Release_Date)
GPU_summary$model_max_price <- GPUs %>%
filter(Release_Price == max(Release_Price, na.rm = T)) %>%
select(Architecture)
BTC_USD <- read.csv("https://raw.githubusercontent.com/cjrieth/AC-5GroupProject/main/data/BTC-USD-YAHOO.csv",
stringsAsFactors = F, na.strings = "null")
View(BTC_USD)
install.packages(gridExtra)
install.packages("gridExtra")
pwd
getwd()
setwd("/Users/KattPaint/Desktop/INFO201/AC-5GroupProject")
getwd()
# Bitcoin Trading From 2018 by day of the week
##Pulls in the main data set for bitcoin since Jan 1, 2018
bitcoin <- read.csv("https://raw.githubusercontent.com/cjrieth/AC-5GroupProject/main/data/BTC-USD3YR.csv")
##Stores the column that is number of shares traded for each day
btcvolume <- data.frame(bitcoin$Volume)
##Stores the data for each of the days of the week in a variable
btcmon <- btcvolume[seq(1, nrow(btcvolume), 7), ]
btctues <- btcvolume[seq(2, nrow(btcvolume), 7), ]
btcwed <- btcvolume[seq(3, nrow(btcvolume), 7), ]
btcthur <- btcvolume[seq(4, nrow(btcvolume), 7), ]
btcfri <- btcvolume[seq(5, nrow(btcvolume), 7), ]
btcsat <- btcvolume[seq(6, nrow(btcvolume), 7), ]
btcsun <- btcvolume[seq(7, nrow(btcvolume), 7), ]
##Changes the data into a data frame instead of a value
btcmon <- read.table(text = btcmon)
btctues <- read.table(text = btctues)
btcwed <- read.table(text = btcwed)
btcthur <- read.table(text = btcthur)
btcfri <- read.table(text = btcfri)
btcsat <- read.table(text = btcsat)
btcsun <- read.table(text = btcsun)
##Changes all the characters into numeric values
btcmon$V1 <- as.numeric(as.character(btcmon$V1))
btctues$V1 <- as.numeric(as.character(btctues$V1))
btcwed$V1 <- as.numeric(as.character(btcwed$V1))
btcthur$V1 <- as.numeric(as.character(btcthur$V1))
btcfri$V1 <- as.numeric(as.character(btcfri$V1))
btcsat$V1 <- as.numeric(as.character(btcsat$V1))
btcsun$V1 <- as.numeric(as.character(btcsun$V1))
##Adds all values to store total shares traded for each day of the week
btcmonf <- sum(btcmon$V1, na.rm = TRUE)
btctuesf <- sum(btctues$V1, na.rm = TRUE)
btcwedf <- sum(btcwed$V1, na.rm = TRUE)
btcthurf <- sum(btcthur$V1, na.rm = TRUE)
btcfrif <- sum(btcfri$V1, na.rm = TRUE)
btcsatf <- sum(btcsat$V1, na.rm = TRUE)
btcsunf <- sum(btcsun$V1, na.rm = TRUE)
##Creates bargraph of data
btcbar <- c(btcmonf/10000000000, btctuesf/10000000000, btcwedf/10000000000,
btcthurf/10000000000, btcfrif/10000000000, btcsatf/10000000000,
btcsunf/10000000000)
secondchart <- barplot(btcbar,
main = "Bitcoin Trading by Day of the Week From 2018",
ylab = "Number of Shares Traded",
names.arg = c("Mon", "Tues", "Wed", "Thurs", "Fri", "Sat", "Sun"),
col = "purple",
border = "yellow")
secondchart
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(lintr)
lintr::lint("ThirdChart.R")
bitcoin <- read.csv("https://raw.githubusercontent.com/cjrieth/AC-5GroupProject/main/data/BTC-USD.csv", na.strings = c("null"))
dash <- read.csv("https://raw.githubusercontent.com/cjrieth/AC-5GroupProject/main/data/DASH-USD.csv", na.strings = c("null"))
ethereum <- read.csv("https://raw.githubusercontent.com/cjrieth/AC-5GroupProject/main/data/ETH-USD3YR.csv", na.strings = c("null"))
iota <- read.csv("https://raw.githubusercontent.com/cjrieth/AC-5GroupProject/main/data/MIOTA-USD.csv", na.strings = c("null"))
bitcoin_prices <- bitcoin %>%
mutate(bithigh = High) %>%
mutate(Date = as.Date(Date)) %>%
group_by(Date) %>%
select(Date, bithigh)
dash_prices <- dash %>%
mutate(dashhigh = High) %>%
mutate(Date = as.Date(Date)) %>%
group_by(Date) %>%
select(Date, dashhigh)
ethereum_prices <- ethereum %>%
mutate(ethhigh = High) %>%
mutate(Date = as.Date(Date)) %>%
group_by(Date) %>%
select(Date, ethhigh)
iota_prices <- iota %>%
mutate(iotahigh = High) %>%
mutate(Date = as.Date(Date)) %>%
group_by(Date) %>%
select(Date, iotahigh)
bitdash <- left_join(bitcoin_prices, dash_prices)
bitdasheth <- left_join(bitdash, ethereum_prices)
everything <- left_join(bitdasheth, iota_prices)
bitcoingraph <- ggplot(data = everything) +
geom_point(mapping = aes(x = Date, y = bithigh)) +
labs(title = "Bitcoin High Prices Over Time", x = "Date", y = "Price", size = .1)
dashgraph <- ggplot(data = everything, aes(Date, dashhigh)) +
geom_point(color = "red") +
labs(title = "Dash High Prices Over Time", x = "Date", y = "Price")
ethereumgraph <- ggplot(data = everything, aes(Date, ethhigh)) +
geom_point(color = "purple") +
labs(title = "Ethereum High Prices Over Time", x = "Date", y = "Price")
iotagraph <- ggplot(data = everything, aes(Date, iotahigh)) +
geom_point(color = "green") +
labs(title = "Iota High Prices Over Time", x = "Date", y = "Price")
third_chart <- grid.arrange(bitcoingraph, dashgraph, ethereumgraph, iotagraph)
third_chart
"Use this file to start making your individual aggregate tables!"
library(tidyr)
library(dplyr)
library(ggplot2)
library(stringr)
gpus <- read.csv("~/Desktop/Info201/AC-5GroupProject/data/gpu-cpu-history-kaggle/All_GPUs.csv")
btc <- read.csv("~/Desktop/Info201/AC-5GroupProject/data/BTC-USD-5Y.csv", na.strings = c("null"))
convert_date <- function(date) {
split <- str_split(date, "-")
num <- switch(split[[1]][[2]],
"Jan" = "01",
"Feb" = "02",
"Mar" = "03",
"Apr" = "04",
"May" = "05",
"Jun" = "06",
"Jul" = "07",
"Aug" = "08",
"Sep" = "09",
"Oct"= "10",
"Nov"= "11",
"Dec"= "12")
return(paste(str_trim(split[[1]][[3]]), num, str_trim(split[[1]][[1]]), sep = "-"))
}
gpus_f <- gpus %>%
filter(!str_detect(Release_Date, "Unknown Release Date")) %>%
rowwise() %>%
mutate(Date = convert_date(Release_Date)) %>%
group_by(Date) %>%
count() %>%
rename(num_gpus_released = n)
btc <- btc %>%
group_by(Date) %>%
select(Date, Close)
joined <- left_join(btc, gpus_f, by = "Date")
joined <- joined %>%
mutate(Date = as.Date(Date, "%Y-%m-%d")) %>%
arrange(Date)
View(joined)
"Use this file to start making your individual aggregate tables!"
library(tidyr)
library(dplyr)
library(ggplot2)
library(stringr)
gpus <- read.csv("~/Desktop/Info201/AC-5GroupProject/data/gpu-cpu-history-kaggle/All_GPUs.csv")
btc <- read.csv("~/Desktop/Info201/AC-5GroupProject/data/BTC-USD-5Y.csv", na.strings = c("null"))
convert_date <- function(date) {
split <- str_split(date, "-")
num <- switch(split[[1]][[2]],
"Jan" = "01",
"Feb" = "02",
"Mar" = "03",
"Apr" = "04",
"May" = "05",
"Jun" = "06",
"Jul" = "07",
"Aug" = "08",
"Sep" = "09",
"Oct"= "10",
"Nov"= "11",
"Dec"= "12")
return(paste(str_trim(split[[1]][[3]]), num, str_trim(split[[1]][[1]]), sep = "-"))
}
gpus_f <- gpus %>%
filter(!str_detect(Release_Date, "Unknown Release Date")) %>%
rowwise() %>%
mutate(Date = convert_date(Release_Date)) %>%
group_by(Date) %>%
count() %>%
rename(num_gpus_released = n)
btc <- btc %>%
group_by(Date) %>%
select(Date, Close)
joined <- left_join(btc, gpus_f, by = "Date")
View(joined)
joined <- joined %>%
mutate(Date = as.Date(Date, "%Y-%m-%d")) %>%
filter(num_gpus_released != NA) %>%
arrange(Date)
joined <- joined %>%
mutate(Date = as.Date(Date, "%Y-%m-%d")) %>%
filter(num_gpus_released !== NA) %>%
arrange(Date)
joined <- joined %>%
mutate(Date = as.Date(Date, "%Y-%m-%d")) %>%
filter(num_gpus_released == NA) %>%
arrange(Date)
View(joined)
joined <- joined %>%
filter(num_gpus_released == NA) %>%
mutate(Date = as.Date(Date, "%Y-%m-%d")) %>%
arrange(Date)
joined <- joined %>%
mutate(Date = as.Date(Date, "%Y-%m-%d")) %>%
arrange(Date)
gpus <- read.csv("~/Desktop/Info201/AC-5GroupProject/data/gpu-cpu-history-kaggle/All_GPUs.csv")
btc <- read.csv("~/Desktop/Info201/AC-5GroupProject/data/BTC-USD-5Y.csv", na.strings = c("null"))
convert_date <- function(date) {
split <- str_split(date, "-")
num <- switch(split[[1]][[2]],
"Jan" = "01",
"Feb" = "02",
"Mar" = "03",
"Apr" = "04",
"May" = "05",
"Jun" = "06",
"Jul" = "07",
"Aug" = "08",
"Sep" = "09",
"Oct"= "10",
"Nov"= "11",
"Dec"= "12")
return(paste(str_trim(split[[1]][[3]]), num, str_trim(split[[1]][[1]]), sep = "-"))
}
gpus_f <- gpus %>%
filter(!str_detect(Release_Date, "Unknown Release Date")) %>%
rowwise() %>%
mutate(Date = convert_date(Release_Date)) %>%
group_by(Date) %>%
count() %>%
rename(num_gpus_released = n)
btc <- btc %>%
group_by(Date) %>%
select(Date, Close)
joined <- left_join(btc, gpus_f, by = "Date")
joined <- joined %>%
mutate(Date = as.Date(Date, "%Y-%m-%d")) %>%
arrange(Date)
joined <- joined %>%
filter(num_gpus_released == is.na) %>%
mutate(Date = as.Date(Date, "%Y-%m-%d")) %>%
arrange(Date)
joined <- joined %>%
mutate(Date = as.Date(Date, "%Y-%m-%d")) %>%
filter(num_gpus_released == is.na) %>%
arrange(Date)
gpus <- read.csv("~/Desktop/Info201/AC-5GroupProject/data/gpu-cpu-history-kaggle/All_GPUs.csv")
btc <- read.csv("~/Desktop/Info201/AC-5GroupProject/data/BTC-USD-5Y.csv", na.strings = c("null"))
convert_date <- function(date) {
split <- str_split(date, "-")
num <- switch(split[[1]][[2]],
"Jan" = "01",
"Feb" = "02",
"Mar" = "03",
"Apr" = "04",
"May" = "05",
"Jun" = "06",
"Jul" = "07",
"Aug" = "08",
"Sep" = "09",
"Oct"= "10",
"Nov"= "11",
"Dec"= "12")
return(paste(str_trim(split[[1]][[3]]), num, str_trim(split[[1]][[1]]), sep = "-"))
}
gpus_f <- gpus %>%
filter(!str_detect(Release_Date, "Unknown Release Date")) %>%
rowwise() %>%
mutate(Date = convert_date(Release_Date)) %>%
group_by(Date) %>%
count() %>%
rename(num_gpus_released = n)
btc <- btc %>%
group_by(Date) %>%
select(Date, Close)
joined <- left_join(btc, gpus_f, by = "Date")
joined <- joined %>%
mutate(Date = as.Date(Date, "%Y-%m-%d")) %>%
filter(num_gpus_released != is.na) %>%
arrange(Date)
?filter
joined <- joined %>%
mutate(Date = as.Date(Date, "%Y-%m-%d")) %>%
arrange(Date)
convert_date <- function(date) {
split <- str_split(date, "-")
num <- switch(split[[1]][[2]],
"Jan" = "01",
"Feb" = "02",
"Mar" = "03",
"Apr" = "04",
"May" = "05",
"Jun" = "06",
"Jul" = "07",
"Aug" = "08",
"Sep" = "09",
"Oct"= "10",
"Nov"= "11",
"Dec"= "12")
return(paste(str_trim(split[[1]][[3]]), num, str_trim(split[[1]][[1]]), sep = "-"))
}
gpus_f <- gpus %>%
filter(!str_detect(Release_Date, "Unknown Release Date")) %>%
rowwise() %>%
mutate(Date = convert_date(Release_Date)) %>%
group_by(Date) %>%
count() %>%
rename(num_gpus_released = n)
btc <- btc %>%
group_by(Date) %>%
select(Date, Close)
joined <- left_join(btc, gpus_f, by = "Date")
joined <- joined %>%
mutate(Date = as.Date(Date, "%Y-%m-%d")) %>%
arrange(Date)
joined %>% filter(num_gpus_released != is.na)
joined %>% filter(num_gpus_released != is.na, .preserve = TRUE)
joined %>% filter(num_gpus_released != is.na, .preserve = TRUE)
joined %>% filter(num_gpus_released != is.na, .preserve = FALSE)
joined %>% filter(num_gpus_released != is.na)
rlang::last_error()
joined %>% filter(num_gpus_released != is.na, na.rm = T)
filter(joined, num_gpus_released != is.na, na.rm = T)
filter(joined, !(num_gpus_released == is.na), na.rm = T)
filter(joined, num_gpus_released == is.na, na.rm = T)
filter(joined$num_gpus_released == is.na, na.rm = T)
# summary info
library(tidyverse)
# Data Set 1:
BTC_USD <- read.csv("https://raw.githubusercontent.com/cjrieth/AC-5GroupProject/main/data/BTC-USD-YAHOO.csv",
stringsAsFactors = F, na.strings = "null")
BTC_USD <- BTC_USD %>% rename(Price = High)
# Data Set 2:
GPUs <- read.csv("https://raw.githubusercontent.com/cjrieth/AC-5GroupProject/main/data/gpu-cpu-history-kaggle/All_GPUs.csv",
stringsAsFactors = F)
GPUs$Release_Price <- as.numeric(gsub("\\$", "", GPUs$Release_Price))
GPUs$Release_Date <- gsub("\\\n", "", GPUs$Release_Date)
GPUs$Release_Date <- as.Date(GPUs$Release_Date, format = "%d-%b-%Y")
# Data Set 3:
bitcoin_price <- read.csv("https://raw.githubusercontent.com/cjrieth/AC-5GroupProject/main/data/kaggle_crypto_data/bitcoin_price.csv",
stringsAsFactors = F)
bitcoin_price <- bitcoin_price %>% rename(Price = High)
bitcoin_price$Date <- as.Date(bitcoin_price$Date, format = "%b %d, %Y")
# Data Set 4:
ethereum_price <- read.csv("https://raw.githubusercontent.com/cjrieth/AC-5GroupProject/main/data/kaggle_crypto_data/ethereum_price.csv",
stringsAsFactors = F)
ethereum_price <- ethereum_price %>% rename(Price = High)
ethereum_price$Date <- as.Date(ethereum_price$Date, format = "%b %d, %Y")
# Data Set 5:
dash_price <- read.csv("https://raw.githubusercontent.com/cjrieth/AC-5GroupProject/main/data/kaggle_crypto_data/dash_price.csv",
stringsAsFactors = F)
dash_price <- dash_price %>% rename(Price = High)
dash_price$Date <- as.Date(dash_price$Date, format = "%b %d, %Y")
# Data Set 6:
iota_price <- read.csv("https://raw.githubusercontent.com/cjrieth/AC-5GroupProject/main/data/kaggle_crypto_data/iota_price.csv",
stringsAsFactors = F)
iota_price <- iota_price %>% rename(Price = High)
iota_price$Date <- as.Date(iota_price$Date, format = "%b %d, %Y")
# Function to get summary information for each data set (excluding GPUs)
get_summary_info <- function(data) {
summary_info <- list()
summary_info$features <- colnames(data)
summary_info$n_cols <- ncol(data)
summary_info$n_obs <- nrow(data)
summary_info$max_price <- data %>%
filter(Price == max(Price, na.rm = T)) %>%
select(Price)
summary_info$date_max_price <- data %>%
filter(Price == max(Price, na.rm = T)) %>%
select(Date)
summary_info$start_price <- data %>%
filter(Date == min(Date, na.rm = T)) %>%
select(Price)
summary_info$date_start_price <- data %>%
filter(Date == min(Date, na.rm = T)) %>%
select(Date)
return(summary_info)
}
# Summary info for each data set
BTC_summary <- get_summary_info(BTC_USD)
bitcoin_summary <- get_summary_info(bitcoin_price)
ethereum_summary <- get_summary_info(ethereum_price)
dash_summary <- get_summary_info(dash_price)
iota_summary <- get_summary_info(iota_price)
GPU_summary <- list()
GPU_summary$max_release_price <- GPUs %>%
filter(Release_Price == max(Release_Price, na.rm = T)) %>%
select(Release_Price)
GPU_summary$max_price_release_date <- GPUs %>%
filter(Release_Price == max(Release_Price, na.rm = T)) %>%
select(Release_Date)
GPU_summary$model_max_price <- GPUs %>%
filter(Release_Price == max(Release_Price, na.rm = T)) %>%
select(Architecture)
?format
BTC_summary$date_start_price
format(BTC_summary$date_start_price, "%B %d, %Y")
?as.character
as.character(BTC_summary$date_start_price, "%B %d, %Y")
format(BTC_summary$date_start_price, format = "%B %d, %Y")
GPU_summary$n_cols <- ncol(GPUs)
GPU_summary$n_obs <- nrow(GPUs)
format(round(as.numeric(bitcoin_summary$max_price), 1), nsmall=1, big.mark=",")
format(round(as.numeric(bitcoin_summary$max_price), 2), nsmall=1, big.mark=",")
format(round(as.numeric(bitcoin_summary$start_price), 1), nsmall=1, big.mark=",")
format(round(as.numeric(ethereum_summary$max_price), 1), nsmall=1, big.mark=",")
# summary info
library(tidyverse)
# Data Set 1:
BTC_USD <- read.csv("https://raw.githubusercontent.com/cjrieth/AC-5GroupProject/main/data/BTC-USD-YAHOO.csv",
stringsAsFactors = F, na.strings = "null")
BTC_USD <- BTC_USD %>% rename(Price = High)
# Data Set 2:
GPUs <- read.csv("https://raw.githubusercontent.com/cjrieth/AC-5GroupProject/main/data/gpu-cpu-history-kaggle/All_GPUs.csv",
stringsAsFactors = F)
GPUs$Release_Price <- as.numeric(gsub("\\$", "", GPUs$Release_Price))
GPUs$Release_Date <- gsub("\\\n", "", GPUs$Release_Date)
GPUs$Release_Date <- as.Date(GPUs$Release_Date, format = "%d-%b-%Y")
# Data Set 3:
bitcoin_price <- read.csv("https://raw.githubusercontent.com/cjrieth/AC-5GroupProject/main/data/kaggle_crypto_data/bitcoin_price.csv",
stringsAsFactors = F)
bitcoin_price <- bitcoin_price %>% rename(Price = High)
bitcoin_price$Date <- as.Date(bitcoin_price$Date, format = "%b %d, %Y")
# Data Set 4:
ethereum_price <- read.csv("https://raw.githubusercontent.com/cjrieth/AC-5GroupProject/main/data/kaggle_crypto_data/ethereum_price.csv",
stringsAsFactors = F)
ethereum_price <- ethereum_price %>% rename(Price = High)
ethereum_price$Date <- as.Date(ethereum_price$Date, format = "%b %d, %Y")
# Data Set 5:
dash_price <- read.csv("https://raw.githubusercontent.com/cjrieth/AC-5GroupProject/main/data/kaggle_crypto_data/dash_price.csv",
stringsAsFactors = F)
dash_price <- dash_price %>% rename(Price = High)
dash_price$Date <- as.Date(dash_price$Date, format = "%b %d, %Y")
# Data Set 6:
iota_price <- read.csv("https://raw.githubusercontent.com/cjrieth/AC-5GroupProject/main/data/kaggle_crypto_data/iota_price.csv",
stringsAsFactors = F)
iota_price <- iota_price %>% rename(Price = High)
iota_price$Date <- as.Date(iota_price$Date, format = "%b %d, %Y")
# Function to get summary information for each data set (excluding GPUs)
get_summary_info <- function(data) {
summary_info <- list()
summary_info$features <- colnames(data)
summary_info$n_cols <- ncol(data)
summary_info$n_obs <- nrow(data)
summary_info$max_price <- data %>%
filter(Price == max(Price, na.rm = T)) %>%
select(Price)
summary_info$date_max_price <- data %>%
filter(Price == max(Price, na.rm = T)) %>%
select(Date)
summary_info$start_price <- data %>%
filter(Date == min(Date, na.rm = T)) %>%
select(Price)
summary_info$date_start_price <- data %>%
filter(Date == min(Date, na.rm = T)) %>%
select(Date)
return(summary_info)
}
# Summary info for each data set
BTC_summary <- get_summary_info(BTC_USD)
bitcoin_summary <- get_summary_info(bitcoin_price)
ethereum_summary <- get_summary_info(ethereum_price)
dash_summary <- get_summary_info(dash_price)
iota_summary <- get_summary_info(iota_price)
GPU_summary <- list()
GPU_summary$n_cols <- ncol(GPUs)
GPU_summary$n_obs <- nrow(GPUs)
GPU_summary$max_release_price <- GPUs %>%
filter(Release_Price == max(Release_Price, na.rm = T)) %>%
select(Release_Price)
GPU_summary$max_price_release_date <- GPUs %>%
filter(Release_Price == max(Release_Price, na.rm = T)) %>%
select(Release_Date)
GPU_summary$model_max_price <- GPUs %>%
filter(Release_Price == max(Release_Price, na.rm = T)) %>%
select(Architecture)
GPU_summary
format(round(as.numeric(GPU_summary$max_release_price), 1), nsmall=1, big.mark=",")
?format
?paste
paste("$", format(round(as.numeric(GPU_summary$max_release_price), 1), nsmall=1, big.mark=","))
paste("$", format(round(as.numeric(GPU_summary$max_release_price), 1), nsmall=1, big.mark=","), collapse = F)
paste("$", format(round(as.numeric(GPU_summary$max_release_price), 1), nsmall=1, big.mark=","), sep = "")
BTC_summary$date_start_price
as.Date(BTC_summary$date_start_price, format = "%B %d, %Y")
x <- BTC_summary$date_start_price
year(x)
format(x, "%B %d, %Y")
?format
format(x, "%B %d, %Y", trim = TRUE)
format(x, "%B %d, %Y", trim = FALSE)
format(as.Date(x), "%B %d, %Y")
BTC_summary$date_max_price
date_format <- new SimpleDateFormat("%Y-%d-%m")
?lubridate
parse_datetime(x, "%B %d, %Y")
parse_datetime(as.character(x), "%B %d, %Y")
library(chron)
install.packages(chron)
library(chron)
library("chron")
?chron
??chron
chron(x, out.format = "%B %d, %Y")
R.version.session
R.version.string
