install.packages("styler")
clear
x = c(1, 2, 3, 5, 19)
boxplot(x)
library(stringr)
names <- c("Katt", "Mike", "Chad")
str_detect(names, "a")
load(pscl)
install.packages(pslc)
install.packages(pscl)
library(dplyr)
install.packages("dplyr")
library(dplyr)
install.packages(pscl)
install.packages("pscl")
library(pscl)
View(pscl)
View(presidentialElections)
pull(wa_2008, demVote)
select(presidentialElections, state, demVote)
state_vote <- select(presidentialElections, state, demVote)
state_vote <- filter(state_vote, state == "Washington")
state_vote
filter(state_vote, demVote == max(demVote))
state_vote <- arrange(state_vote, demVote)
state_vote
install.packages("nycflights13")
View(nycflights13)
?nycflights13
View(flights)
View("flights")
load("nycflights13")
load("flights")
load(flights)
load(nycflights13)
flights
library("nycflights13")
View(flights)
install.packages("dyplr")
library("dyplr")
install.packages("tidyr")
library("tidyr")
most_late <- flights %>%
group_by(dest) %>%
summarize(delay = mean(arr_delay))
library(dyplr)
install.packages("dplyr")
install.packages("dplyr")
library("dplyr")
most_late <- flights %>%
+ group_by(dest) %>%
+ summarize(delay = mean(arr_delay))
library("nycflights13")
View(flights)
most_late <- flights %>%
+ group_by(dest) %>%
+ summarize(delay = mean(arr_delay))
most_late <- flights %>%
group_by(dest) %>%
summarize(delay = mean(arr_delay))
View(most_late)
most_late <- flights %>%
+ group_by(dest) %>%
+ summarize(delay = mean(arr_delay, na.rm = TRUE))
most_late <- flights %>% group_by(dest) %>%
+ summarize(delay = mean(arr_delay, na.rm = TRUE))
most_late <- flights %>%
group_by(dest) %>%
summarize(delay = mean(arr_delay, na.rm = TRUE))
latest <- most_late %>%
filter(delay == max(delay, na.rm = TRUE))
select(dest, delay)
latest <- most_late %>%
filter(delay == max(delay, na.rm = TRUE))
latest <- most_late %>%
filter(delay == max(delay, na.rm = TRUE)) %>%
select(dest, delay) %>%
left_join(airports, by = c("dest" = "faa")) %>%
select(dest, name, delay)
latest
require(httr)
headers = c(
`Upgrade-Insecure-Requests` = '1',
)
params = list(
`datatype` = 'json'
)
res <- httr::GET(url = 'https://financialmodelingprep.com/api/v3/historical-price-full/crypto/BTCUSD', httr::add_headers(.headers=headers), query = params)
install.packages("httr")
install.packages("httr")
library("httr")
require(httr)
headers = c(
`Upgrade-Insecure-Requests` = '1',
)
params = list(
`datatype` = 'json'
)
res <- httr::GET(url = 'https://financialmodelingprep.com/api/v3/historical-price-full/crypto/BTCUSD', httr::add_headers(.headers=headers), query = params)
require(httr)
headers = c(
`Upgrade-Insecure-Requests` = '1'
)
params = list(
`datatype` = 'json'
)
res <- httr::GET(url = 'https://financialmodelingprep.com/api/v3/historical-price-full/crypto/BTCUSD', httr::add_headers(.headers=headers), query = params
)
headers <-  c('Upgrade-Insecure-Requests' = '1')
params = list('datatype' = 'json')
res <- httr::GET(url = 'https://financialmodelingprep.com/api/v3/historical-price-full/crypto/BTCUSD', httr::add_headers(.headers=headers), query = params)
View(res)
crypto
library(fueleconomy)
View(vehicles)
vehicles %>%
filter(cty == max(cty)) %>%
pull(model)
library(dplyr)
vehicles %>%
filter(cty == max(cty)) %>%
pull(model)
vehicles %>%
filter(cty == max(cty)) %>%
select(model)
library(nycflights13)
View(flights)
?flightsa
?flights
nrow(flights)
library(nycflights13)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
cols <- ncol(flights)
rows <- nrow(flights)
features <- select(flights)
features <- colnames(flights)
features
library(dplyr)
flights <- mutate(flights, time_gain_lost = dep_delay - arr_delay)
flights <- arrange(flights, -time_gain_lost)
flights %>%
mutate(time_gain_lost = dep_delay - arr_delay) %>%
arrange(-time_gain_lost)
flights <- flights %>%
mutate(time_gain_lost = dep_delay - arr_delay) %>%
arrange(-time_gain_lost)
hist(time_gain_lost)
hist(flights$time_gain_lost)
hist(flights$time_gain_lost, na.rm = TRUE)
avg_time_g_l <- mean(flights$time_gain_lost, na.rm = TRUE)
features
sea_flights <- flights %>%
filter(dest = "SEA") %>%
slect(origin, dest, time_gain_lost)
sea_flights <- flights %>%
filter(dest = "SEA") %>%
select(origin, dest, time_gain_lost)
sea_flights <- flights %>%
filter(dest == "SEA") %>%
select(origin, dest, time_gain_lost)
View(sea_flights)
sea_avg_time <- mean(sea_flights$time_gain_lost, na.rm = TRUE)
jfk_to_sea <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
summarize(avg_air_time = mean(air_time, na.rm = TRUE),
min_air_time = min(air_time, na.rm = TRUE),
max_air_time = max(air_time, na.rm = TRUE))
jfk_to_sea
cols <- ncol(flights)
rows <- nrow(flights)
features <- colnames(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, time_gain = dep_delay - arr_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, -time_gain)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- flights %>%
mutate(time_gain = dep_delay - arr_delay) %>%
arrange(-time_gain)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$time_gain)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
avg_time_g_l <- mean(flights$time_gain, na.rm = TRUE)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just create
sea_flights <- flights %>%
filter(dest == "SEA") %>%
select(origin, dest, time_gain)
# On average, did flights to SeaTac gain or loose time?
sea_avg_time <- mean(sea_flights$time_gain, na.rm = TRUE)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
jfk_to_sea <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
summarize(avg_air_time = mean(air_time, na.rm = TRUE),
min_air_time = min(air_time, na.rm = TRUE),
max_air_time = max(air_time, na.rm = TRUE))
View(flights)
library(nycflights13)
library(dplyr)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
cols <- ncol(flights)
rows <- nrow(flights)
features <- colnames(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, time_gain = dep_delay - arr_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, -time_gain)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- flights %>%
mutate(time_gain = dep_delay - arr_delay) %>%
arrange(-time_gain)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$time_gain)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
avg_time_g_l <- mean(flights$time_gain, na.rm = TRUE)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just create
sea_flights <- flights %>%
filter(dest == "SEA") %>%
select(origin, dest, time_gain)
# On average, did flights to SeaTac gain or loose time?
sea_avg_time <- mean(sea_flights$time_gain, na.rm = TRUE)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
jfk_to_sea <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
summarize(avg_air_time = mean(air_time, na.rm = TRUE),
min_air_time = min(air_time, na.rm = TRUE),
max_air_time = max(air_time, na.rm = TRUE))
View(flights)
flights %>% select(time_gain, dep_delay, arr_delay)
flights %>% select(time_gain, dep_delay, arr_delay) %>% View
flights <- mutate(flights, time_gain = dep_delay - arr_delay)
flights %>% select(time_gain, dep_delay, arr_delay) %>% View
flights <- mutate(flights, time_gain = dep_delay - arr_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, -time_gain)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- flights %>%
mutate(time_gain = dep_delay - arr_delay) %>%
arrange(-time_gain)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$time_gain)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
avg_time_g_l <- mean(flights$time_gain, na.rm = TRUE)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just create
sea_flights <- flights %>%
filter(dest == "SEA") %>%
select(origin, dest, time_gain)
# On average, did flights to SeaTac gain or loose time?
sea_avg_time <- mean(sea_flights$time_gain, na.rm = TRUE)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
jfk_to_sea <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
summarize(avg_air_time = mean(air_time, na.rm = TRUE),
min_air_time = min(air_time, na.rm = TRUE),
max_air_time = max(air_time, na.rm = TRUE))
iew(flights)
View(flights)
flights %>% mutate(-time_gain_lost)
flights <- flights %>% mutate(-time_gain_lost)
View(flights)
flights <- subset(flights, select = -c(flights$time_gain_lost, flights$-time_gain_lost))
flights <- subset(flights, select = -c(flights$time_gain_lost, flights$time_gain_lost))
avg_time_g <- mean(flights$time_gain, na.rm = TRUE)
jfk_to_sea
dep_delay_month <- flights %>%
group_by(month) %>%
summarize(avg_delay = mean(dep_delay))
View(dep_delay_month)
dep_delay_month <- flights %>%
group_by(month) %>%
summarize(avg_delay = mean(dep_delay, na.rm = TRUE))
View(dep_delay_month)
greatest_month <- dep_delay_month %>%
filter(avg_delay == max(avg_delay)) %>%
pull(month)
greatest_month
plot(dep_delay_month)
highest_dests <- flights %>%
group_by(dest) %>%
summarise(avg_arr = mean(arr_delay, na.rm = TRUE)) %>%
filter(avg_arr)
highest_dests <- flights %>%
group_by(dest) %>%
summarise(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
filter(avg_arr_delay)
highest_dests <- flights %>%
group_by(dest) %>%
summarise(avg_arr_delay = mean(arr_delay, na.rm = TRUE))
highest_dests
highest_dests <- flights %>%
group_by(dest) %>%
summarise(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
top_n(10, avg_arr_delay)
highest_dates''
highest_dests
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
highest_city <- flights %>%
mutate(speed = distance / air_time) %>%
group_by(dest) %>%
summarise(avg_speed = mean(speed, na.rm = TRUE)) %>%
filter(avg_speed == max(avg_speed)) %>%
pull(dest)
highest_city
highest_city <- flights %>%
mutate(speed = distance / air_time) %>%
group_by(dest) %>%
summarise(avg_speed = mean(speed, na.rm = TRUE)) %>%
filter(avg_speed == max(avg_speed, na.rm = T)) %>%
pull(dest)
highest_city
library(readr)
All_GPUs <- read_csv("INFO201/AC-5GroupProject/data/gpu-cpu-history-kaggle/All_GPUs.csv")
View(All_GPUs)
nrow(All_GPUs)
ncol(All_GPUs)
library("nycflights13")
library("dplyr")
View(flights)
View(airports)
View(airlines)
avg_arr_delay <- flights %>%
filter(dest) %>%
summarize(avg_arr = mean(arr_delay, na.rm = T))
avg_arr_delay <- flights %>%
select(dest) %>%
summarize(avg_arr = mean(arr_delay, na.rm = T))
avg_arr_delay <- flights %>%
select(dest)
View(avg_arr_delay)
summarize(flights, avg_arr = mean(arr_delay, na.rm = T))
avg_arr_delay <- flights %>%
select(dest, arr_delay) %>%
summarize(avg_arr = mean(arr_delay, na.rm = T))
View(avg_arr_delay)
select(flights, dest, arr_delay)
avg_arr_delay <- flights %>%
group_by(dest)
View(avg_arr_delay)
avg_arr_delay <- flights %>%
group_by(dest) %>%
select(arr_delay)
View(avg_arr_delay)
avg_arr_delay <- flights %>%
group_by(dest, arr_delay)
View(avg_arr_delay)
avg_arr_delay <- flights %>%
group_by(dest) %>%
summarize(avg_arr = mean(arr_delay, na.rm = T))
View(avg_arr_delay)
avg_arr_delay <- flights %>%
group_by(dest) %>%
summarize(avg_arr = mean(arr_delay, na.rm = T)) %>%
left_join(airports, by = 'faa')
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
avg_arr_delay <- flights %>%
group_by(dest) %>%
summarize(avg_arr = mean(arr_delay, na.rm = T)) %>%
left_join(airports, by = faa)
avg_arr_delay <- flights %>%
group_by(dest) %>%
summarize(avg_arr = mean(arr_delay, na.rm = T)) %>%
left_join(airports, by = "faa")
View(avg_arr_delay)
avg_arr_delay <- left_join(avg_arr_delay, airports, by = "faa")
avg_arr_delay <- left_join(avg_arr_delay, airports, by = "dest")
avg_arr_delay <- flights %>%
group_by(dest) %>%
summarize(avg_arr = mean(arr_delay, na.rm = T)) %>%
left_join(airports, by = "name")
avg_arr_delay <- flights %>%
group_by(dest) %>%
summarize(avg_arr = mean(arr_delay, na.rm = T)) %>%
left_join(airports)
avg_arr_delay <- flights %>%
group_by(dest) %>%
summarize(avg_arr = mean(arr_delay, na.rm = T)) %>%
left_join(airports, by = 'faa')
View(avg_arr_delay)
rlang::last_error()
avg_arr_delay <- flights %>%
group_by(dest) %>%
summarize(avg_arr = mean(arr_delay, na.rm = T)) %>%
left_join(airports, by = 'dest')
avg_arr_delay <- flights %>%
group_by(dest) %>%
summarize(avg_arr = mean(arr_delay, na.rm = T)) %>%
left_join(airports)
avg_arr_delay <- flights %>%
group_by(dest) %>%
summarize(avg_arr = mean(arr_delay, na.rm = T)) %>%
left_join(airports, by = c('dest' = 'faa'))
View(avg_arr_delay)
largest_delay <- avg_arr_delay %>%
filter(avg_arr == max(avg_arr, na.rm = T)) %>%
pull(name)
smallest_delay <- avg_arr_delay %>%
filter(avg_arr == min(avg_arr, na.rm = T)) %>%
pull(name)
avg_delay_airline <- flights %>%
group_by(carrier) %>%
summarize(avg_delay = mean(arr_delay, na.rm = T)) %>%
filter(avg_delay = min(avg_delay, na.rm = T)) %>%
pull(name)
avg_delay_airline <- flights %>%
group_by(carrier) %>%
summarize(avg_delay = mean(arr_delay, na.rm = T)) %>%
filter(avg_delay == min(avg_delay, na.rm = T)) %>%
pull(name)
avg_delay_airline <- flights %>%
group_by(carrier) %>%
summarize(avg_delay = mean(arr_delay, na.rm = T)) %>%
filter(avg_delay == min(avg_delay, na.rm = T)) %>%
left_join(airlines, by = "carrier") %>%
pull(name)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library(tidyverse)
View(midwest)
ggplot(data = midwest)
ggplot(data = midwest) +
geom_point(mapping = aes(x = percollege, y = percbelowpoverty))
ggplot(data = midwest) +
geom_point(mapping = aes(x = percollege, y = percbelowpoverty), alpha = .3)
install.packages("RColorBrewer")
library(RColorBrewer)
install.packages("palmerpenguins")
library(palmerpenguins)
library(tidyverse)
View(penguins)
hist(penguins$bill_length_mm)
library(ggplot2)
ggplot(data = penguins)
geom_histogram(mapping = aes(x = bill_length_mm))
ggplot(data = penguins) +
geom_histogram(mapping = aes(x = bill_length_mm))
ggplot(data = penguins) +
geom_boxplot(mapping = aes(x = bill_length_mm))
ggplot(data = penguins) +
geom_violin(mapping = aes(x = bill_length_mm, y = 1))
ggplot(data = penguins) +
geom_histogram(mapping = aes(x = bill_length_mm))
by_species <- penguins %>%
group_by(species) %>%
count()
by_species
ggplot(data = penguins) +
geom_col(mapping = aes(x = species, y = n))
ggplot(data = by_species) +
geom_col(mapping = aes(x = species, y = n))
ggplot(data = by_species) +
geom_col(mapping = aes(x = species, y = n))
ggplot(data = penguins) +
geom_histogram(mapping = aes(x = bill_length_mm)) +
facet_wrap(~species)
ggplot(data = penguins) +
geom_boxplot(mapping = aes(x = bill_length_mm, y = species))
by_species_island <- penguins %>%
group_by(species, island) M
by_species_island <- penguins %>%
group_by(species, island) %>%
count()
by_species_island
ggplot(data = by_species_island) +
geom_tile(mapping = aes(x = species, y = island))
ggplot(data = by_species_island) +
geom_tile(mapping = aes(x = species, y = island, fill = n)
ggplot(data = by_species_island) +
geom_tile(mapping = aes(x = species, y = island, fill = n))
ggplot(data = penguins) +
geom_point(mapping = aes(x = bill_length_mm, color = species))
ggplot(data = penguins) +
geom_point(mapping = aes(x = bill_length_mm, y = flipper_length_mm, color = species))
getwd
getwd()
setwd("~/Desktop/INFO201/AC-5GroupProject/")
getwd()
